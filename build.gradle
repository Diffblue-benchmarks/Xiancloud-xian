//see https://plugins.gradle.org/plugin/io.codearte.nexus-staging
plugins {
    id "io.codearte.nexus-staging" version "0.11.0"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group 'info.xiancloud'
    version '0.1.0'

    repositories {
        jcenter()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        if (project.path != ':xian-core') {
            compile project(':xian-core')
        } else {
            compile group: 'io.netty', name: 'netty-all', version: '4.1.9.Final'
            compile group: 'com.google.guava', name: 'guava', version: '21.0'
            compile group: 'com.alibaba', name: 'fastjson', version: '1.2.38'
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    //publish artifacts into private nexus
    install {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/repository/maven-releases/") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }

    task copyPlugins(type: Sync) {
        from configurations.runtime
        into 'plugins'
    }

    configurations {
        compile.exclude module: 'netty' // exclude any other version of netty, we only use netty-all
        compile.exclude module: 'c3p0' // no c3p0
        compile.exclude group: 'com.mchange', module: 'mchange-commons-java' // no c3p0
    }

    // Signature of artifacts
    signing {
        sign configurations.archives
    }

    // OSSRH publication
    uploadArchives {
        if ("true".equalsIgnoreCase(project.publishToMavenCentral))
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/happyyangyuan/xian'

                        scm {
                            connection 'scm:git:https://github.com/happyyangyuan/xian.git'
                            developerConnection 'scm:git:git@github.com:happyyangyuan/xian.git'
                            url 'https://github.com/happyyangyuan/xian'
                        }

                        licenses {
                            license {
                                name 'Apache License'
                                url 'http://www.apache.org/licenses/'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'happyyangyuan'
                                name = 'happyyangyuan'
                                email = 'happyyangyuan@163.com'
                            }
                        }
                    }
                }
            }
    }

    nexusStaging {
        username = ossrhUser
        password = ossrhPassword
    }

    if (project.file('WebRoot').exists()) {
        println 'web detected:' + project.name
        apply plugin: 'war'
        dependencies {
            /*providedRuntime group: 'info.xiancloud', name: 'xian-core', version: "${xianVersion}"*/
            providedRuntime project(':xian-core')
        }
        configurations {
            war {
                archiveName 'web.war' // here we give the fixed archive name.
                from 'WebRoot'
                //We fix the web root name as 'WebRoot', whoever uses this xian framework's web plugin must obey it.
            }
        }
        artifacts {
            war tasks.war
        }
    }
}
